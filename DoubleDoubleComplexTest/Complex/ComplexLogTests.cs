using DoubleDouble;
using DoubleDoubleComplex;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace DoubleDoubleComplexTests {
    using NComplex = System.Numerics.Complex;

    [TestClass()]
    public class ComplexLogTests {

        [TestMethod()]
        public void LogTest() {
            foreach (Complex z in new[] { (1, 2), (2, 5), (6, -3), (7, -4), (3, -9), (7, 1), (-3, -4), (-1, -9), (-2, 1) }) {
                Complex c = Complex.Log(z);
                NComplex nc = NComplex.Log((NComplex)z);

                ComplexAssert.AreEqual(nc, c, 1e-7);
            }
        }

        [TestMethod()]
        public void Log2Test() {
            foreach (Complex z in new[] { (1, 2), (2, 5), (6, -3), (7, -4), (3, -9), (7, 1), (-3, -4), (-1, -9), (-2, 1) }) {
                Complex c = Complex.Log2(z);
                NComplex nc = NComplex.Log((NComplex)z, 2);

                ComplexAssert.AreEqual(nc, c, 1e-7);
            }
        }

        [TestMethod()]
        public void Log10Test() {
            foreach (Complex z in new[] { (1, 2), (2, 5), (6, -3), (7, -4), (3, -9), (7, 1), (-3, -4), (-1, -9), (-2, 1) }) {
                Complex c = Complex.Log10(z);
                NComplex nc = NComplex.Log10((NComplex)z);

                ComplexAssert.AreEqual(nc, c, 1e-7);
            }
        }

        [TestMethod()]
        public void LogNTest() {
            foreach (int n in new[] { 3, 5, 6 }) {
                foreach (Complex z in new[] { (1, 2), (2, 5), (6, -3), (7, -4), (3, -9), (7, 1), (-3, -4), (-1, -9), (-2, 1) }) {
                    Complex c = Complex.Log(z, n);
                    NComplex nc = NComplex.Log((NComplex)z, n);

                    ComplexAssert.AreEqual(nc, c, 1e-7);
                }
            }
        }

        [TestMethod()]
        public void Log1pTest() {
            Complex[] expecteds_realneg = [
                "-3.4657359027997265470861606072908828403775e-1+7.8539816339744830961566084581987572104929e-1i",
                "-2.3500181462286777682546851557417103235045e-1+3.2175055439664219340140461435866131902076e-1i",
                "-1.2343003896576289894232097041925378066315e-1+1.4189705460416392281285161710255308300778e-1i",
                "-6.2321222603638298669246678295607152249585e-2+6.6568163775823804198646694293971067097873e-2i",
                "-3.1228677466873302166752990263411671987078e-2+3.2246882435253920090921475550846839449198e-2i",
                "-1.5622396519053807952680986318447662911306e-2+1.5871682991790049208840809834221702180813e-2i",
                "-7.8121783599898931597709530422102991992419e-3+7.8738530241005428907300296974383960514659e-3i",
                "-3.9062100300119262934209519221537908175709e-3+3.9215485247600016874767823237374305537539e-3i",
                "-1.9531200183716162458698131073837963156669e-3+1.9569446642965447762313699321717409669942e-3i",
                "-9.7656187820807834614199469653765112605476e-4+9.7751679519741096013289678320853291876908e-4i",
                "-4.8828117233291982539639243924145489790106e-4+4.8851974618929389125178479949617595675046e-4i",
                "-2.4414061529516977352063368016588518789952e-4+2.4420023934605151536444074696215799081287e-4i",
                "-1.2207031128711833134712766345671679227064e-4+1.2208521487385342833169877598003398822354e-4i",
                "-6.1035156098403671239077791693904410829719e-5+6.1038881691880911531855246525132226745403e-5i",
                "-3.0517578106051326330150182986707080190446e-5+3.0518509466522421744274729188942939853515e-5i",
                "-1.5258789060131470003362630615385575419112e-5+1.5259021895512129654834145550275241091166e-5i",
                "-7.6293945309539371386141563900402358599472e-6+7.6294527392069729406199218616771214323078e-6i",
                "-3.8146972655879923540869450668905838920895e-6+3.8147118175772358010053322863435666871514e-6i",
                "-1.9073486328078740574958185187272851838267e-6+1.9073522707959330209822029508379770376137e-6i",
                "-9.5367431640567175801415982066011084097864e-7+9.5367522590153001408689621964747254201836e-7i",
                "-4.7683715820305271980346882503164597628159e-7+4.7683738557687272337689182600049448473035e-7i",
                "-2.3841857910155346497866477924563375800116e-7+2.3841863594499039582611891494392697459139e-7i",
                "-1.1920928955078012062253504585521869710394e-7+1.1920930376163709457926672313701147272215e-7i",
                "-5.9604644775390483827829502508191432649742e-8+5.9604648328104444972658805071742662776965e-8i",
            ];

            Complex[] expecteds_realpos = [
                "7.2345949146816273070753518747838669971860e-1+2.4497866312686415417208248121127581091414e-1i",
                "4.1916459520222160334958359259937044579904e-1+1.6514867741462683827912828964394345399839e-1i",
                "2.2811871674079379719040276908196487421894e-1+9.9668652491162027378446119878020590243278e-2i",
                "1.1932386892508750495857456817614066962623e-1+5.5498505245716835557198148092237210439803e-2i",
                "6.1056960797111740099490883826701071727464e-2+2.9403288204005115274102864223424157255260e-2i",
                "3.0886429699049200435093780734981543029254e-2+1.5150355874769810641178191720441785002532e-2i",
                "1.5533771459496858419961664151531315721782e-2+7.6921559756488329693881262580050001093950e-3i",
                "7.7896519534462972457384627184398149290982e-3+3.8759495826870625851445405011599295936881e-3i",
                "3.9005329464062186160571261074102939562320e-3+1.9455228371854311790584903151932597302806e-3i",
                "1.9516951109919894874009222762071493749626e-3+9.7465856076693624503128136205091217051200e-4i",
                "9.7620494984082751218329672198642387137248e-4+4.8780483935714389023704095532468954808923e-4i",
                "4.8819185274032439408965997114910655994225e-4+2.4402146904616255150213106939227926154836e-4i",
                "2.4411827447125720300423940031764424826363e-4+1.2204051684590807229660328053858217426107e-4i",
                "1.2206472471615903711661556688719131355200e-4+6.1027706503023293015503361321631873900273e-5i",
                "6.1033759285087400751049473185446873294456e-5+3.0515715584058499667735115652140792980327e-5i",
                "3.0517228881403089842827407187759308881980e-5+1.5258323414238983829141733718764595163244e-5i",
                "1.5258701751304695201156714463954489476581e-5+7.6292781175564798393903392834620095801340e-6i",
                "7.6293727034141652544472371764794414910370e-6+3.8146681619980828836015350876951569506153e-6i",
                "3.8146918086614153148607092968022358123313e-6+1.9073413568803283481459580420633272279779e-6i",
                "1.9073472685710255832138621397791324505004e-6+9.5367249742002677555307110959736996815872e-7i",
                "9.5367397534580911538721584096637035914462e-7+4.7683670345617165402226653321107353122553e-7i",
                "4.7683707293800574381173629044917204933161e-7+2.3841846541477447096415547361701314695958e-7i",
                "2.3841855778528155657461083910263312162053e-7+1.1920926112907803116972740653783745536095e-7i",
                "1.1920928422171087297142856978291975590037e-7+5.9604637669964043845790727090002580405333e-8i",
            ];

            for ((ddouble x, int index) = (0.5d, 0); index < expecteds_realneg.Length; x /= 2, index++) {
                Complex z = (-x, x);

                Complex expected = expecteds_realneg[index];

                Complex actual = Complex.Log1p(z);
                ddouble err = (expected - actual).Magnitude / expected.Magnitude;

                Console.WriteLine($"{z}, err={err:e4}");
                Console.WriteLine(expected);
                Console.WriteLine(actual);

                Assert.IsTrue(err < 2e-31, $"\n{expected}\n{actual}");

                Assert.AreEqual(new Complex(actual.R, -actual.I), Complex.Log1p((-x, -x)));
            }

            for ((ddouble x, int index) = (0.5d, 0); index < expecteds_realpos.Length; x /= 2, index++) {
                Complex z = (2 * x, x);

                Complex expected = expecteds_realpos[index];

                Complex actual = Complex.Log1p(z);
                ddouble err = (expected - actual).Magnitude / expected.Magnitude;

                Console.WriteLine($"{z}, err={err:e4}");
                Console.WriteLine(expected);
                Console.WriteLine(actual);

                Assert.IsTrue(err < 2e-31, $"\n{expected}\n{actual}");

                Assert.AreEqual(new Complex(actual.R, -actual.I), Complex.Log1p((2 * x, -x)));
            }
        }
    }
}