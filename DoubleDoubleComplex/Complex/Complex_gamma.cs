using DoubleDouble;
using System.Collections.ObjectModel;

namespace DoubleDoubleComplex {

    public partial class Complex {
        public static Complex Gamma(Complex z) {
            if (ddouble.Abs(z.I) <= ddouble.Abs(z.R) * 5e-31) {
                return ddouble.Gamma(z.R);
            }

            if (z.R < ddouble.Point5) {
                Complex y = ddouble.PI / (SinPI(z) * Gamma(One - z));

                return y;
            }

            if (z.Norm < 225d) {
                ReadOnlyCollection<ddouble> lanczos_table = Consts.Gamma.LanczosTable;

                z -= One;

                Complex x = lanczos_table[0];
                for (int i = 1; i < lanczos_table.Count; i++) {
                    x += lanczos_table[i] / (z + i);
                }

                Complex s = z + ddouble.Point5, t = (s + Consts.Gamma.LanczosG) / ddouble.E;

                Complex y = Pow(t, s) * x;

                return y;
            }
            else {
                Complex x = Zero, u = One;
                Complex v = One / z, w = v * v;

                foreach (Complex t in Consts.Gamma.StirlingTable) {
                    Complex c = u * t;
                    x += c;
                    u *= w;
                }

                x *= v;

                Complex r = Sqrt(2 * ddouble.PI / z);
                Complex p = Pow(z / ddouble.E, z);
                Complex s = Exp(x);

                Complex y = r * p * s;

                return y;
            }
        }
    }

    internal static partial class Consts {
        public static class Gamma {
            public static readonly ddouble LanczosG = 17;
            public static readonly ReadOnlyCollection<ddouble> LanczosTable = new(new ddouble[] {
                  "1.0377284941118262461406818653588691e-7",
                  "2.4637391865473094971560424176300029e0",
                  "-1.3616196944021459792649951169632351e1",
                  "3.2858959353332301931827190264895484e1",
                  "-4.5497365802358106574344893463381736e1",
                  "3.9953851238856081885222435418576462e1",
                  "-2.3229358976210804682788520354852678e1",
                  "9.0674217240341031452852243963949129e0",
                  "-2.3620434864929074832528034627604703e0",
                  "4.0090110099587873148517628354989816e-1",
                  "-4.2415187508327700016027742133876509e-2",
                  "2.6045647100497074139802843978127192e-3",
                  "-8.2914153124296746843575708173828957e-5",
                  "1.1379899700554904880756018563228771e-6",
                  "-4.8715007824840124259101356056425766e-9",
                  "3.4076249187946610572460694799435091e-12",
                  "-7.6092965567125043948796015870923152e-17",
            });

            public static readonly ReadOnlyCollection<ddouble> StirlingTable = new(new ddouble[] {
                "8.333333333333333333333333333333333333333e-2",
                "-2.777777777777777777777777777777777777778e-3",
                "7.936507936507936507936507936507936507937e-4",
                "-5.952380952380952380952380952380952380952e-4",
                "8.417508417508417508417508417508417508417e-4",
                "-1.917526917526917526917526917526917526918e-3",
                "6.41025641025641025641025641025641025641e-3",
                "-2.955065359477124183006535947712418300654e-2",
                "1.796443723688305731649384900158893966944e-1",
                "-1.392432216905901116427432216905901116427e0",
                "1.340286404416839199447895100069013112491e1",
                "-1.568482846260020173063651324520889738281e2",
                "2.193103333333333333333333333333333333333e3",
                "-3.610877125372498935717326521924223073648e4",
                "6.914722688513130671083952507756734675533e5",
                //"-1.523822153940741619228336495888678051866e7",
                //"3.829007513914141414141414141414141414141e8",
                //"-1.088226603578439108901514916552510537473e10",
                //"3.473202837650022522522522522522522522523e11",
                //"-1.236960214226927445425171034927132488108e13",
                //"4.887880647930793350758151625180229021085e14",
                //"-2.132033396091937389697505898213683855747e16",
                //"1.021775296525700077565287628053585500394e18",
                //"-5.357547217330020361082770919196920448485e19",
                //"3.061578263704883415043151051329622758194e21",
                //"-1.899991742639920405029371429306942902947e23",
                //"1.276337403382883414923495137769782597654e25",
                //"-9.252847176120416307230242348347622779519e26",
                //"7.21882259518561029783605018730163792249e28",
                //"-6.045183405995856967743148238754547286066e30",
                //"5.420670471570094545193477814826100013661e32",
                //"-5.1929578153140819467001947643918576847e34",
            });
        }
    }
}
